generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("LOCAL_DATABASE_URL")
  // url       = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String           @id   @default(uuid())

  name            String?
  email           String           @unique
  phone           String?
  password        String?
  birthday        DateTime?
  role            UserRole         @default(USER)
  activatedAt     DateTime?
  provider        String?
  providerId      String?

  code            ActivationCode?
  cart            Cart?
  orders          Order[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ActivationCode {
  id              String            @id   @default(uuid())

  code            String
  userId          String            @unique

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model CartItem {
  id              String            @id   @default(uuid())

  quantity        Int               @default(1)
  variantId       Int
  doppings        Ingredient[]
  cartId          String

  variant         ProductVariant    @relation(fields: [variantId], references: [id])
  cart            Cart              @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Cart {
  id              String            @id   @default(uuid())

  amount          Int               @default(0)
  items           CartItem[]
  token           String
  userId          String?           @unique

  user            User?             @relation(fields: [userId], references: [id])
}

enum OrderStatus {
  PENDING
  SUCCESSED
  CANCELLED
}

model OrderItem {
  id              String            @id   @default(uuid())

  quantity        Int               @default(1)
  variantId       Int
  doppings        Ingredient[]
  orderId         Int

  variant         ProductVariant    @relation(fields: [variantId], references: [id])
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Order {
  id              Int               @id   @default(autoincrement())

  amount          Int
  items           OrderItem[]
  customerName    String
  customerEmail   String
  customerPhone   String
  address         String
  deliveredAt     DateTime
  comment         String?
  status          OrderStatus       @default(PENDING)
  paymentId       String?
  userId          String?

  user            User?             @relation(fields: [userId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Category {
  id              Int               @id   @default(autoincrement())

  name            String            @unique
  products        Product[]
}

model Ingredient {
  id              Int               @id   @default(autoincrement())

  name            String            @unique
  price           Int
  imageUrl        String

  products        Product[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
}

model ProductVariant {
  id              Int               @id   @default(autoincrement())

  size            Int
  type            Int?
  weight          Int
  price           Int
  productId       Int

  cartItems       CartItem[]
  orderItems      OrderItem[]

  product         Product           @relation(fields: [productId], references: [id])
}

model Product {
  id              Int               @id   @default(autoincrement())

  name            String
  description     String
  rating          Int               @default(0)
  categoryId      Int
  imageUrl        String

  category        Category          @relation(fields: [categoryId], references: [id])
  variants        ProductVariant[]
  ingredients     Ingredient[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Story {
  id              Int               @id   @default(autoincrement())

  imageUrl        String
  storiesId       Int

  stories         Stories           @relation(fields: [storiesId], references: [id], onDelete: Cascade)
}

model Stories {
  id              Int               @id   @default(autoincrement())

  imageUrl        String
  items           Story[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}